syntax = "proto3";
package ai.yue.library.test.proto;

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option java_multiple_files = true;

service OpenTableExampleTest {
  rpc GetTableExample(google.protobuf.StringValue) returns (GetTableExampleResponse);
  rpc PageTableExample(PageTableExampleRequest) returns (PageTableExampleResponse);
  rpc MapResult2(google.protobuf.StringValue) returns (MapResult);
  rpc ListResult2(PageTableExampleRequest) returns (ListResult);
}

message GetTableExampleResponse {
  int64 id = 1;                  // 有序主键：单表时数据库自增、分布式时雪花自增
  string uuid = 2;               // 无序主键：UUID5无符号
  int32 sort_idx = 3;            // 排序索引
  string create_user = 4;        // 创建人：用户名、昵称、人名
  string create_user_uuid = 5;   // 创建人：用户uuid
  string create_time = 6;        // 创建时间
  string update_user = 7;        // 更新人：用户名、昵称、人名
  string update_user_uuid = 8;   // 更新人：用户uuid
  string update_time = 9;        // 更新时间
  string delete_user = 10;       // 删除人：用户名、昵称、人名
  string delete_user_uuid = 11;  // 删除人：用户uuid
  int64 delete_time = 12;        // 删除时间戳：默认0（未删除）
  string field_one = 13;
  string field_two = 14;
  string field_three = 15;
}

message PageTableExampleRequest {
  int32 page = 1;
  int32 limit = 2;
  string field_one = 13;
}

message PageTableExampleResponse {
  int64 count = 1;
  repeated GetTableExampleResponse table_example = 2;
}

message MapResult {
  int32 code = 1;
  string msg = 2;
  bool flag = 3;
  google.protobuf.Any data = 4;
}

message ListResult {
  int32 code = 1;
  string msg = 2;
  bool flag = 3;
  int64 count = 4;
  repeated google.protobuf.Any data = 5;
}

// ============== 类型测试 ==============

enum PhoneType {
  MOBILE = 0;
  HOME = 1;
  WORK = 2;
}

/**
 * 【推荐】使用string类型代替enum类型，以约定的方式将枚举值说明写在注释中，但程序中必须定义枚举来解析此字段，并处理相应逻辑。
 *   说明：因为在proto中定义的枚举类型只能用来做类型与值约束，并不能添加相应的逻辑处理，使得在程序中反倒成为一种负担。
 * 【推荐】使用string类型代替Timestamp类型，并使用yyyy-MM-dd HH:mm:ss格式化时间格式字符串
 * 【推荐】使用string类型代替duration类型，传输时直接使用序列化值，需要时再做相应的反序列化
 */
message TypeTest {
  enum PhoneType2 {
    MOBILE2 = 0;
    HOME2 = 1;
    WORK2 = 2;
  }
  PhoneType type = 3;
  PhoneType2 type2 = 4;
  google.protobuf.Timestamp timestamp = 5;
  google.protobuf.Duration duration = 6;
  map<string, google.protobuf.Any> map = 7;
}
